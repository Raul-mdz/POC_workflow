name: üßπ JIRA Branch Inspector

on:
  workflow_dispatch:
    inputs:
      days_old:
        description: 'D√≠as de antig√ºedad para marcar ramas como obsoletas'
        required: true
        default: '10'
        type: string

jobs:
  inspect-jira-branches:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      actions: read

    steps:
      - name: üß© Checkout del repositorio
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Configurar Git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: üîê Autenticar con GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
        
      - name: ‚úÖ Verificar autenticaci√≥n
        run: gh auth status

      - name: üîÑ Obtener todas las ramas remotas
        run: git fetch --all --prune

      - name: üîç Analizar ramas JIRA
        env:
          GH_REPO: ${{ github.repository }}
          DAYS_OLD: ${{ inputs.days_old }}
        run: |
          set -e
          LIMIT_DATE=$(date -u -d "$DAYS_OLD days ago" +%s)

          echo "üßπ Analizando ramas JIRA sin actividad en los √∫ltimos $DAYS_OLD d√≠as"
          echo "   Fecha l√≠mite: $(date -u -d "$DAYS_OLD days ago" +%Y-%m-%d)"
          echo ""

          PROTECTED_REGEX='^(main|dev|master|develop|feature/Vuexy-4\.0\.0-starter-kit-init-template|feature/Vuexy-4\.0\.0-full-version-init-template|docs/update-readme-and-changelog|test)$'

          # Listar todas las ramas
          git for-each-ref --format='%(refname:short)' refs/remotes/origin/ | sort > all_branches.txt

          echo "üì¶ Descargando lista de Pull Requests..."
          gh pr list --state all --json headRefName,state,number > prs.json

          echo "üìã REVISANDO RAMAS JIRA:"
          echo "========================="

          while IFS= read -r branch; do
            BRANCH_NAME="${branch#origin/}"

            # Filtrar solo ramas tipo JIRA (ej: ABC-123)
            if [[ ! "$BRANCH_NAME" =~ ^[A-Z]+-[0-9]+ ]]; then
              continue
            fi

            # Ignorar ramas protegidas
            if [[ "$BRANCH_NAME" =~ $PROTECTED_REGEX ]]; then
              echo "üõ°Ô∏è  $BRANCH_NAME (rama protegida)"
              continue
            fi

            LAST_COMMIT_DATE=$(git log -1 --format="%cI" "$branch" 2>/dev/null || echo "unknown")
            if [ "$LAST_COMMIT_DATE" = "unknown" ]; then
              echo "‚ö†Ô∏è  $BRANCH_NAME (sin commits o inaccesible)"
              continue
            fi

            LAST_COMMIT_EPOCH=$(date -d "$LAST_COMMIT_DATE" +%s)
            DAYS_DIFF=$(( ( $(date +%s) - LAST_COMMIT_EPOCH ) / 86400 ))

            PR_STATE=$(jq -r --arg b "$BRANCH_NAME" '.[] | select(.headRefName==$b) | .state' prs.json)
            PR_NUMBER=$(jq -r --arg b "$BRANCH_NAME" '.[] | select(.headRefName==$b) | .number' prs.json)

            ICON=""
            STATUS=""

            if [ "$PR_STATE" = "OPEN" ]; then
              ICON="üü¢"
              STATUS="PR abierto (#$PR_NUMBER)"
            elif [ "$DAYS_DIFF" -gt "$DAYS_OLD" ]; then
              ICON="üî¥"
              STATUS="Sin actividad ($DAYS_DIFF d√≠as)"
            else
              ICON="üü°"
              STATUS="Reciente ($DAYS_DIFF d√≠as)"
            fi

            printf "%s %-40s ‚Üí %s (√∫ltimo commit: %s)\n" "$ICON" "$BRANCH_NAME" "$STATUS" "$LAST_COMMIT_DATE"

          done < all_branches.txt

          echo ""
          echo "‚úÖ An√°lisis completado con √©xito"

name: üßπ JIRA Branch Cleanup

on:
  workflow_dispatch:
    inputs:
      days_old:
        description: 'D√≠as de antig√ºedad para considerar obsoleta'
        required: false
        default: '10'
        type: string

jobs:
  cleanup-jira-branches:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure Git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Fetch all branches
        run: git fetch --all --prune

      - name: üßπ Cleanup obsolete JIRA branches
        env:
          GH_REPO: ${{ github.repository }}
          DAYS_OLD: ${{ inputs.days_old }}
        run: |
          set -e
          LIMIT_DATE=$(date -u -d "$DAYS_OLD days ago" +%s)
          echo "üßπ Eliminando ramas JIRA obsoletas (sin cambios en √∫ltimos $DAYS_OLD d√≠as)"
          echo "   L√≠mite: $(date -u -d "$DAYS_OLD days ago" +%Y-%m-%d)"
          echo ""

          PROTECTED_REGEX='^(main|dev|feature/Vuexy-4\.0\.0-starter-kit-init-template|feature/Vuexy-4\.0\.0-full-version-init-template|docs/update-readme-and-changelog)$'

          echo "üì¶ Descargando lista de PRs (open/closed/merged)..."
          gh pr list --state all --json headRefName,state,number > prs.json

          FOUND=0
          DELETED=0
          KEPT=0

          echo "üìã REVISANDO RAMAS JIRA:"
          echo "========================"

          git for-each-ref --format='%(refname:short)' refs/remotes/origin/ | \
            grep -E '^origin/[A-Z]+-[0-9]+' | \
            grep -v -E "^origin/($PROTECTED_REGEX)$" | \
          while read branch; do
            BRANCH_NAME="${branch#origin/}"
            echo "::group::üß© $BRANCH_NAME"

            LAST_COMMIT_DATE=$(git log -1 --format="%cI" "$branch" || echo "unknown")

            if [ "$LAST_COMMIT_DATE" = "unknown" ]; then
              echo "‚ö†Ô∏è No se pudo obtener la fecha de √∫ltimo commit para $BRANCH_NAME"
              echo "::endgroup::"
              continue
            fi

            LAST_COMMIT_EPOCH=$(date -d "$LAST_COMMIT_DATE" +%s)
            PR_STATE=$(jq -r --arg b "$BRANCH_NAME" '.[] | select(.headRefName==$b) | .state' prs.json)
            PR_NUMBER=$(jq -r --arg b "$BRANCH_NAME" '.[] | select(.headRefName==$b) | .number' prs.json)

            DELETE_BRANCH=false

            if [ "$PR_STATE" = "OPEN" ]; then
              echo "üö´ Conservando (PR abierto #$PR_NUMBER)"
              KEPT=$((KEPT + 1))
            elif [ "$PR_STATE" = "MERGED" ]; then
              echo "üü¢ Eliminando (PR #$PR_NUMBER mergeado)"
              DELETE_BRANCH=true
            elif [ "$PR_STATE" = "CLOSED" ]; then
              echo "üü† Eliminando (PR #$PR_NUMBER cerrado sin merge)"
              DELETE_BRANCH=true
            elif [ "$LAST_COMMIT_EPOCH" -lt "$LIMIT_DATE" ]; then
              echo "üóëÔ∏è Eliminando (√∫ltimo commit $LAST_COMMIT_DATE)"
              DELETE_BRANCH=true
            else
              echo "‚úÖ Conservando (√∫ltimo commit reciente: $LAST_COMMIT_DATE)"
              KEPT=$((KEPT + 1))
            fi

            if [ "$DELETE_BRANCH" = true ]; then
              echo "üßπ Eliminando rama remota origin/$BRANCH_NAME..."
              git push origin --delete "$BRANCH_NAME" || echo "‚ö†Ô∏è No se pudo eliminar $BRANCH_NAME"
              DELETED=$((DELETED + 1))
            fi

            FOUND=1
            echo "::endgroup::"
          done

          echo ""
          echo "üìä RESUMEN FINAL:"
          echo "=================="
          echo "üü¢ Ramas eliminadas: $DELETED"
          echo "‚úÖ Ramas conservadas: $KEPT"
          echo "üìà Total analizadas: $((DELETED + KEPT))"

          if [ "$FOUND" -eq 0 ]; then
            echo "‚úÖ No se encontraron ramas JIRA para analizar."
          fi

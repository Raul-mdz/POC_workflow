name: üßπ JIRA Branch Cleanup

on:
  schedule:
    # Ejecutar cada 10 d√≠as a las 2:00 AM UTC
    - cron: '0 2 */10 * *'
  workflow_dispatch:
    inputs:
      days_old:
        description: 'D√≠as de antig√ºedad para considerar obsoleta'
        required: false
        default: '10'
        type: string
      dry_run:
        description: 'Modo dry-run (solo mostrar, no eliminar)'
        required: false
        default: false
        type: boolean

jobs:
  cleanup-jira-branches:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
      actions: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure Git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
        
      - name: Verify GitHub CLI authentication
        run: gh auth status

      - name: Fetch all branches
        run: git fetch --all --prune

      - name: üßπ Cleanup obsolete JIRA branches
        env:
          GH_REPO: ${{ github.repository }}
          DAYS_OLD: ${{ inputs.days_old }}
          DRY_RUN: ${{ inputs.dry_run }}
        run: |
          set -e
          LIMIT_DATE=$(date -u -d "$DAYS_OLD days ago" +%s)
          
          if [ "$DRY_RUN" = "true" ]; then
            echo "üîç MODO DRY-RUN: Solo mostrando ramas candidatas (no se eliminar√° nada)"
          fi
          echo "üßπ Analizando ramas JIRA obsoletas (sin actividad en √∫ltimos $DAYS_OLD d√≠as)"
          echo "   L√≠mite: $(date -u -d "$DAYS_OLD days ago" +%Y-%m-%d)"
          echo "   Timestamp l√≠mite: $LIMIT_DATE"
          echo "   Criterio: Eliminar ramas con √∫ltimo commit anterior a esta fecha"
          echo ""

          PROTECTED_REGEX='^(main|dev|master|develop|feature/Vuexy-4\.0\.0-starter-kit-init-template|feature/Vuexy-4\.0\.0-full-version-init-template|docs/update-readme-and-changelog|test)$'

          echo "üì¶ Descargando lista de PRs (open/closed/merged)..."
          gh pr list --state all --json headRefName,state,number > prs.json

          FOUND=0
          DELETED=0
          KEPT=0

          echo "üìã REVISANDO RAMAS JIRA:"
          echo "========================"
          
          # Mostrar todas las ramas remotas primero
          echo "üîç Todas las ramas remotas:"
          git for-each-ref --format='%(refname:short)' refs/remotes/origin/ | sort
          echo ""
          
          # Mostrar ramas JIRA encontradas
          echo "üîç Ramas JIRA encontradas:"
          git for-each-ref --format='%(refname:short)' refs/remotes/origin/ | \
            grep -E '^origin/[A-Z]+-[0-9]+' | sort
          echo ""
          
          # Mostrar ramas protegidas
          echo "üõ°Ô∏è Ramas protegidas (no se eliminar√°n):"
          git for-each-ref --format='%(refname:short)' refs/remotes/origin/ | \
            grep -E "^origin/($PROTECTED_REGEX)$" | sort
          echo ""
          
          # Crear array de ramas para procesar
          BRANCHES=()
          while IFS= read -r branch; do
            BRANCHES+=("$branch")
          done < <(git for-each-ref --format='%(refname:short)' refs/remotes/origin/ | \
            grep -E '^origin/[A-Z]+-[0-9]+' | \
            grep -v -E "^origin/($PROTECTED_REGEX)$")
          
          echo "üîç Encontradas ${#BRANCHES[@]} ramas JIRA para analizar"
          
          if [ ${#BRANCHES[@]} -eq 0 ]; then
            echo "‚ö†Ô∏è No se encontraron ramas JIRA para procesar"
            echo "   Verifica que existan ramas con formato JIRA (ej: BEP-123, ABC-456)"
            echo "   Patr√≥n buscado: origin/[A-Z]+-[0-9]+"
          fi
          
          for branch in "${BRANCHES[@]}"; do
            BRANCH_NAME="${branch#origin/}"
            echo "::group::üß© $BRANCH_NAME"

            LAST_COMMIT_DATE=$(git log -1 --format="%cI" "$branch" || echo "unknown")

            if [ "$LAST_COMMIT_DATE" = "unknown" ]; then
              echo "‚ö†Ô∏è No se pudo obtener la fecha de √∫ltimo commit para $BRANCH_NAME"
              echo "::endgroup::"
              continue
            fi

            LAST_COMMIT_EPOCH=$(date -d "$LAST_COMMIT_DATE" +%s)
            PR_STATE=$(jq -r --arg b "$BRANCH_NAME" '.[] | select(.headRefName==$b) | .state' prs.json)
            PR_NUMBER=$(jq -r --arg b "$BRANCH_NAME" '.[] | select(.headRefName==$b) | .number' prs.json)
            
            echo "üìä An√°lisis de $BRANCH_NAME:"
            echo "   √öltimo commit: $LAST_COMMIT_DATE"
            echo "   Timestamp: $LAST_COMMIT_EPOCH"
            echo "   L√≠mite: $LIMIT_DATE"
            echo "   D√≠as sin actividad: $(( (LIMIT_DATE - LAST_COMMIT_EPOCH) / 86400 ))"
            echo "   PR State: $PR_STATE"
            echo "   PR Number: $PR_NUMBER"

            DELETE_BRANCH=false

            if [ "$PR_STATE" = "OPEN" ]; then
              echo "üö´ Conservando (PR abierto #$PR_NUMBER)"
              KEPT=$((KEPT + 1))
            elif [ "$LAST_COMMIT_EPOCH" -lt "$LIMIT_DATE" ]; then
              echo "üóëÔ∏è Eliminando (sin actividad > $DAYS_OLD d√≠as: $LAST_COMMIT_DATE)"
              DELETE_BRANCH=true
            else
              echo "‚úÖ Conservando (√∫ltimo commit reciente: $LAST_COMMIT_DATE)"
              KEPT=$((KEPT + 1))
            fi

            if [ "$DELETE_BRANCH" = true ]; then
              if [ "$DRY_RUN" = "true" ]; then
                echo "üîç [DRY-RUN] Se eliminar√≠a: $BRANCH_NAME"
                DELETED=$((DELETED + 1))
              else
                echo "üßπ Eliminando rama remota origin/$BRANCH_NAME..."
                if git push origin --delete "$BRANCH_NAME" 2>&1; then
                  echo "‚úÖ Rama $BRANCH_NAME eliminada exitosamente"
                  DELETED=$((DELETED + 1))
                else
                  echo "‚ö†Ô∏è Error al eliminar $BRANCH_NAME - intentando con GitHub CLI..."
                  if gh api -X DELETE "repos/$GH_REPO/git/refs/heads/$BRANCH_NAME" 2>&1; then
                    echo "‚úÖ Rama $BRANCH_NAME eliminada con GitHub CLI"
                    DELETED=$((DELETED + 1))
                  else
                    echo "‚ùå No se pudo eliminar $BRANCH_NAME con ning√∫n m√©todo"
                  fi
                fi
              fi
            fi

            FOUND=1
            echo "::endgroup::"
          done
          
          echo "üîç Procesamiento completado. FOUND=$FOUND"

          echo ""
          echo "üìä RESUMEN FINAL:"
          echo "=================="
          if [ "$DRY_RUN" = "true" ]; then
            echo "üîç Modo: DRY-RUN (simulaci√≥n)"
            echo "üü¢ Ramas que se eliminar√≠an: $DELETED"
          else
            echo "üîç Modo: PRODUCCI√ìN"
            echo "üü¢ Ramas eliminadas: $DELETED"
          fi
          echo "‚úÖ Ramas conservadas: $KEPT"
          echo "üìà Total analizadas: $((DELETED + KEPT))"

          if [ "$FOUND" -eq 0 ]; then
            echo "‚úÖ No se encontraron ramas JIRA para analizar."
          fi
          
          # Verificar que las ramas se eliminaron correctamente (solo en modo producci√≥n)
          if [ "$DELETED" -gt 0 ] && [ "$DRY_RUN" = "false" ]; then
            echo ""
            echo "üîÑ Verificando eliminaci√≥n de ramas..."
            git fetch --all --prune
            echo "‚úÖ Verificaci√≥n completada"
          fi
